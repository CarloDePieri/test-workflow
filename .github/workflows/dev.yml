---
name: dev

on:

  pull_request:
    branches:
      - "main"

  push:
    branches:
      - "testing"

  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        default: "warning"

jobs:

  ci:
    name: ci
    runs-on: ubuntu-latest
    env:
      is_cron: ${{ github.event_name == 'schedule' }}

    steps:

      - run: pipx install poetry

      - run: poetry --version

      - run: exit 1

      - name: Checkout.
        uses: actions/checkout@v3

      - uses: actions/setup-python@v3
        with:
          python-version: '3.10.x'

      - name: Make sure path are there also for act shells.
        if: ${{ env.ACT }}
        run: |
          echo "export PATH=\"/opt/hostedtoolcache/Python/${{ env.python_version }}/x64:/opt/hostedtoolcache/Python/${{ env.python_version }}/x64/bin:$PATH\"" >> /root/.bashrc
      - name: Upgrade pip.
        run: python -m pip install --upgrade pip

      - name: Install poetry and invoke.
        run: pip install poetry invoke

      - name: Configure poetry
        run: poetry config virtualenvs.in-project true

      - name: Install the first python venv
        run: inv install -p latest

      - name: Launch tests
        run: inv test-cov

      - name: Fix source path in sonarqube coverage file.
        if: ${{ !env.ACT }}
        run: sed -i "s#`pwd`#/github/workspace#" coverage/sonarqube/coverage.xml

      # - uses: CarloDePieri/github_actions_shell@v1
        # with:
          # rssh_env: ${{ secrets.RSSH_ENV }}

      - uses: SonarSource/sonarqube-scan-action@master
        if: ${{ !env.ACT }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          projectBaseDir: /home/runner/work/test-workflow/test-workflow/

      - uses: CarloDePieri/sonarqube-scan-action@master
        if: ${{ env.ACT }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

